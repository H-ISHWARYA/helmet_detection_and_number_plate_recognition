'''import cv2
import numpy as np
import random
import os
from PIL import Image
import time
import imutils
from tensorflow.keras.models import load_model
os.environ['TF_FORCE_GPU_ALLOW_GROWTH'] = 'true'
net = cv2.dnn.readNet("yolov3-custom_7000.weights", "yolov3-custom.cfg")
net.setPreferableBackend(cv2.dnn.DNN_BACKEND_CUDA)
net.setPreferableTarget(cv2.dnn.DNN_TARGET_CUDA)
model = load_model('helmet-nonhelmet_cnn.h5')
print('model loaded!!!')
cap = cv2.VideoCapture('testing videos/test2.mp4')
COLORS = [(0,255,0),(0,0,255)]
fourcc = cv2.VideoWriter_fourcc(*"XVID")
writer = cv2.VideoWriter('output.avi', fourcc, 5,(888,500))
writer = VideoWriter('output.avi',(frame.shape[1], frame.shape[0]))
writer.open()
def helmet_or_nohelmet(helmet_roi):
    try:
        helmet_roi = cv2.resize(helmet_roi, (224, 224))
        helmet_roi = np.array(helmet_roi,dtype='float32')
        helmet_roi = helmet_roi.reshape(1, 224, 224, 3)
        helmet_roi = helmet_roi/255.0
        return int(model.predict(helmet_roi)[0][0])
    except:
            pass
layer_names = net.getLayerNames()
output_layers = [layer_names[i[0] - 1] for i in net.getUnconnectedOutLayers()]
ret = True
while ret:
    ret, img = cap.read()
    img = imutils.resize(img,height=500)
    # img = cv2.imread('test.png')
    height, width = img.shape[:2]
    blob = cv2.dnn.blobFromImage(img, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
    net.setInput(blob)
    outs = net.forward(output_layers)
    confidences = []
    boxes = []
    classIds = []
    for out in outs:
        for detection in out:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.3:
                center_x = int(detection[0] * width)
                center_y = int(detection[1] * height)
                w = int(detection[2] * width)
                h = int(detection[3] * height)
                x = int(center_x - w / 2)
                y = int(center_y - h / 2)
                boxes.append([x, y, w, h])
                confidences.append(float(confidence))
                classIds.append(class_id)
    indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)
    for i in range(len(boxes)):
        if i in indexes:
            x,y,w,h = boxes[i]
            color = [int(c) for c in COLORS[classIds[i]]]
            # green --> bike
            # red --> number plate
            if classIds[i]==0: #bike
                helmet_roi = img[max(0,y):max(0,y)+max(0,h)//4,max(0,x):max(0,x)+max(0,w)]
            else: #number plate
                x_h = x-60
                y_h = y-350
                w_h = w+100
                h_h = h+100
                cv2.rectangle(img, (x, y), (x + w, y + h), color, 7)
                # h_r = img[max(0,(y-330)):max(0,(y-330 + h+100)) , max(0,(x-80)):max(0,(x-80 + w+130))]
                if y_h>0 and x_h>0:
                    h_r = img[y_h:y_h+h_h , x_h:x_h +w_h]
                    c = helmet_or_nohelmet(h_r)
                    cv2.putText(img,['helmet','no-helmet'][c],(x,y-100),cv2.FONT_HERSHEY_SIMPLEX,2,(0,255,0),2)                
                    cv2.rectangle(img, (x_h, y_h), (x_h + w_h, y_h + h_h),(255,0,0), 10)
    writer.write(img)
    cv2.imshow("Image", img)
    if cv2.waitKey(1) == 27:
        break
writer.release()
cap.release()
cv2.waitKey(0)
cv2.destroyAllWindows()'''


import cv2
# from opencv module
a = cv2. waitKey (1)
webC = cv2.VideoCapture(0)
# enabling HD webcam zebtronics
while True:
    try:
#exception handling
        check, sd = webC.read()
        cv2.imshow("Capture",sd )
        a = cv2.waitKey(1)
        if a == ord('s'): 
#enter letter "s" to capture image
            cv2.imwrite(filename='savd_1.png',img=sd)
            webC.release()
            cv2.waitKey(1650)
            cv2.destroyAllWindows()
            print("Your image was saved")
            break
    except (KeyboardInterrupt):
          webc.release()
          print("The program has terminated.")
          cv2.destroyAllWindows()
          break


print("add your image")
import cv2
shape_detected=""
shade= cv2.imread('savd_1.png')
black = cv2.cvtColor(shade, cv2.COLOR_BGR2GRAY)
_, threshold = cv2.threshold(black, 127, 255, cv2.THRESH_BINARY)
contours, _ = cv2.findContours(
    threshold, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
counter = 0
for contour in contours: #looping statement
    if counter == 0:
        counter = 1
        continue
    approx = cv2.approxPolyDP(
        contour, 0.01 * cv2.arcLength(contour, True), True)
    cv2.drawContours(shade, [contour], 0, (0, 0, 255), 5)
    M = cv2.moments(contour)
    if M['m00'] != 0.0:
        x = int(M['m10']/M['m00'])#x and y axis division
        y = int(M['m01']/M['m00'])
    if len(approx) == 3:#dimension checker condition 
        a="triangle"
    elif len(approx) == 4:
        a="quadrilateral"
    elif len(approx) == 5:
        a="pentagon"
    elif len(approx) == 6:
        a="hexagon"
    else:
        a="circle"
if a=="circle":#when you choose correct image
    print("yay!!!!!!!! \n you are wearing a helmet wonderful job")
else:#when you choose wrong image
    print("to drive safely do wear helmet")

